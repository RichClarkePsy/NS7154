[["index.html", "Week 3 - Working with data files Chapter 1 Index", " Week 3 - Working with data files Dr Richard Clarke 2023-07-05 Chapter 1 Index "],["welcome.html", "Chapter 2 Welcome 2.1 Why learn R? Why not just use SPSS or STATA?", " Chapter 2 Welcome Welcome to the R Lab Book for NS7514 Health in Context: From Cell to Society Over the course of the semester this book will guide you through the use of R and RStudio to organise, visulise, and analyse health data related to the lecture content from each week of this module. This book will take you from the absolute basics of R, to the point where you are able to make stunning visulisations, expert analysis and, most importantly, conduct the analysis for your assignment. 2.1 Why learn R? Why not just use SPSS or STATA? If you've completed an undergraduate psychology degree there's a good chance that you've been taught statistical analysis using SPSS or STATA. These programs are great, and are capable of conducting some amazing analysis, but data in the real world is often a lot messier than the data you saw during your undergraduate degree. I want you to leave this MSc with the skills needed to deal with that messiness, wherever you may end up, and for me R is an excellent place to hone those skills. Need more convincing? Here are the usual go-to reasons for learning R as a psychology student. 1. R is open access and therefore free SPSS and STATA are ludicrously expensive. A personal licence, at my last check, cost a little over $1000 per year. This is fine for a university to cover (for now), but move away from academia to perhaps a charity or a non-government organisation and its a cost that many are not willing to pay for. As such, you may find that there are many jobs out there that you are perfectly capable of doing, from a knowledge point of view, but they just don't have access to the tools you've been trained on. This was the position that I was in after I finished my last post-doc. Doors were closed to me - really interesting door where I could have done a lot of good - due to my skill base being too narrow to be applicable to them. I don't want that to be the case for you. By the end of this course you'll be able to do all the analysis you can already do on the paid software, in this free and accessible language that is quickly becoming a highly desirable skill for a graduate to have. 2. Data wrangling Say you want to conduct some longitudinal research. You find participants, you send them surveys each month, you also perhaps visit them in person and take some bio-physiological measurements (blood pressure, BMI etc). All of this data is recorded and saved across multiple different excel files. Some participants drop out or fail to respond for some of the time points. How do you match participants for your final dataset and combine files into a format where you're able to run your analysis? This is a problem that we very rarely cover at undergraduate, but it's very common and essential part of the research process, especially with health data collected by a third party (i.e. a charity or even The NHS). In the days before I learnt R this kind of problem led me to copy and pasting chunks of data in excel, entering data into SPSS by hand, or any number of long laborious processes that were prone to silly mistakes during lapses of concentration or poor work processes. There has to be an easier way! Good news, there is, and it's R! The skill to cope with the data problem I've described above, and many others, is know as data wrangling and it's a skill that is best deployed with code. By the end of this module, you should be able to have all your raw data for a project together in a folder, open a script you have written, click run and end up with a perfect dataset ready for your analysis every time. 3. Data visulisations I never truly understand my data until I can see it. Relationships between variables, differences between groups, location data, all can be visulised quickly and effectively using R. Here are a few of may favorites that you will be creating across the course of the semester: add in visulisations here And the great thing about creating these with code is that next time you come across similar data in the same format you can simply copy your previous code and adapt it to your needs. No more clicking around in excel trying to find the same colours and arrangement from last time, no more ugly SPSS outputs, just publication ready figures that communicate your amazing finds in a way the words just can't capture. 4. Reproducability If you've been in psychology for a while you may have heard that we are in a \"Replication Crisis\". Findings that we're previously held up as reliable understandings of the human condition are crumbling into dust once we apply the rigor of the scientific method. A, now infamous, 2015 study The Open Science Collaboration followed the methodology of 100 experimental reports, from a single year (2008), that had been published in a range of high-ranking journals. The aim was to see how many of the findings replicated (i.e. when repeated produced the same results). Out of the 100 only 39 were found to successful replicate. This finding proved a watershed moment in psychology whereby many were questioning the reliability of our work. One solution suggested is to make the process of our science far more transparent, and this is were R comes in. It by no means solves all the issues with the replication crists but by submitting code along with making our data open access, readers of our work no longer need to \"take our word for it\" that we've conducted an appropriate analysis and correctly reported our results. They can now check for themselves. Journal are also starting to take note of such a culture shift and are starting to require the submission of analysis reports. So with any luck this skill will start to align more with you getting published. We will talk much more about this aspect when we get on to the section on Rmarkdown and reproducability workflows. Hopefully I've convinced you of the importance of learning R as a psychology student. If not here is a link to particularly good talk by Phil McAleer from the University of Glasgow on why they moved their undergraduate degree towards a focus on reproducible research, using R for statistics. Now on with the learning! "],["getting-started.html", "Chapter 3 Getting started 3.1 Installing R and RStudio 3.2 Opening RStudio for the first time 3.3 Packages", " Chapter 3 Getting started 3.1 Installing R and RStudio R is a programming language that youll be learning to write code in, while RStudio is what is know as an Integrated Development Environment (IDE) which makes working with R easier. I will largely use the terms \"R\" and \"RStudio\" interchangeable throughout this course, but you can think of writing in R as you would writing in English and RStudio the program you write it in. You could write all your written assignment in NotePad but Microsoft Word gives you a lot more freedom so thats often the default. The same logic is true for R, using RStudio just makes life a lot easier. To get started you will first need to install the language R and then the IDE of RStudio. Both can be installed, for free, from the company that maintains them, Posit. From there you will then need to select your operating system (Windows or Mac). Click here for the Posit R and RStudio download page One of the best things about using R and RStudio is that they are both very widely used across many academic disciplines, and in the professional world. As such there are many guides for installation. If you hit on an issue with installation, it's very likely other have too. Here are some helpful links to help you install R and RStudio your own home computer (which I highly recommend you do): University of Glasgow PsyTeachR installation guide YouTube video showing the download process for Windows YouTube video showing the download process for Mac 3.2 Opening RStudio for the first time When you first open RStudio you should be greeted by a page that looks like this: If not double check that it is RStudio that you are opening and not just R in a text editor. First thing I suggest you do is click File -&gt; New File -&gt; R Script. This will show you the normal view you will get when working in R. Here you have four segments to your screen: The console (Bottom left) - For directly running short snippets of code, also where all your output and errors (sooo many errors) will be shown. The script editor (Top left) - For writing longer chunks of code that you'll then be able to save out as a file. An area that shows you any functions and objects you create (Top right). An area that shows you any of the fancy figures you create, also somewhere that you can navigate your files from (Bottom right). Youll become intimately aware of what each of these areas do over the course of this module but if you want a overview of these sections now this video give a good introduction to each section (I recommend watching from around 5mins 45sec). Finally for the basic set up, it is very important to look cool while doing your analysis in R. To change the basic appearance: Click Tools -&gt; Global Options -&gt; Appearance. I like the Editor Theme Vibrant Ink. It makes me feel like I'm a hacker from the 90's. Also, if you're old like me you may want to make use of View -&gt; Zoom in option. Stressed yet? Don't worry, we'll have your screen looking like this in no time. There is a learning curve for R but once things start to click you'll love it! 3.3 Packages The basic functions of R are great, but one of the most useful things about working in R (instead of the commercial software) is its ability to incorporate user generated content to customise what we're able to do. Such add-on content are known as packages. The validated and most frequently used packages are stored on the CRAN (Comprehensive R Archive Network) server and RStudio knows exactly where to find them, as long as you know the name of the package. So no need to click around random websites downloading files to install, which is nice. For this module we will make extensive use of the tidyverse package. This is a package that brings together a set of grammar and visulisation tools that makes the process of writing in R a whole lot easier. To install the tidyverse package type the following code into your console (next to the bottom &gt;) and then hit enter key to run the code. Or you can copy and paste directly from this document by clicking the clipboard icon in the top right of the box. install.packages(&quot;tidyverse&quot;) You only ever need to install a package once per computer but you will need to load it each time you open RStudio. In these subsequent times this is the only code you'll need: library(tidyverse) Each analysis that you write its a good idea to include the packages as the first code on the script, so copy out this code and place it at the top of your new script (top left of your screen, if you've created one). To run this, and any code, you can either highlight the code and click the Run button in the top right of the script window. Or you can navagate to the line that you want to run and hit Ctrl+Enter. "],["writing-and-running-your-first-code.html", "Chapter 4 Writing and running your first code 4.1 R as an overpowered calculator 4.2 This is a \"smart book\" 4.3 Meet your pesonal R tutor ChatGPT (or alternitive) 4.4 Back to the coding 4.5 Extra exercises", " Chapter 4 Writing and running your first code Okay, lets get you coding! 4.1 R as an overpowered calculator Firstly, R is an excellent calculator. Take the following lines of code and try running them in the console or from your script window. 1+1 4*(14-4) 10^2 sqrt(144) Reminder of how to run code To run code in the console (the bottom left window of RStudio) click on the bottom \"&gt;\" symbol, type or paste the code you would like to run, and then hit the Enter key. To run code from your script window: Make sure you have a script window open, you can open a new script by clicking File -&gt; New File -&gt; R Script. Type or paste the code you want to run. Highlight your code and click Run or navigate to the line/chunk you would like to run and hit Ctrl+Enter (for a mac it's Command+Enter) After running each line of code the output is reported in the console and should look something like this: ## [1] 2 ## [1] 40 ## [1] 100 ## [1] 12 What does the [1] mean? The [1] at the beginning of each output is a way of indexing where you are in a output. Take the following code for instance: rnorm(50, 5, 1) Running this generates a set of 50 data points that are normally distributed with a mean of 5 and a standard deviation of 1. As it creates a long output that spans over multiple lines the number in the [] gives you an indication of how many data points are displayed on each line. The final line of code that you ran used a function, in this case the sqrt function that is used in order to perform a square root calculation. When typing it into RStudio you may have noticed that after typing the first three letters a box popped up with the rest of the function. If you hover over that box with you mouse you will see an explanation of the function. This is a super helpful feature of RStudio that you will end up using a lot. The {base} indicates that this function exists within the base version of R. Later we will be using functions that we've added with the tidyverse package. Its worth keeping an eye on these as a common error is trying to use a function from a package that has not been loaded. Another way to learn about a function is by running: ?sqrt. This loads a help file in the bottom right that explains more information about the function. Try running the following for functions from the dplyr package that is included in the tidyverse package: library(tidyverse) ?mutate ?select ?arrange Click here if you received an error message If you received an error message that reads somthing like this: No documentation for mutate in specified packages and libraries: you could try ??mutate Then this is likely due to you not having yet installed or loaded the tidyverse package. To install simple run install.packages(\"tidyverse\") in your console or from your script. Read the previous chapter that covers packages for more detail on this. These help files are likely to be confusing for you at the moment but they will make a lot more sense the further you go with your coding. 4.2 This is a \"smart book\" Did you see that blue boxes in the section above? I will be using these throughout this book to include additional explanation or hide solutions to exercises so you can first try to work out the code for yourself. Also in some places I will include questions that allow you to self-test your knowledge. For example: The square root of 36864 is Hint Use the sqrt() function The box will turn green when you input the correct number. What code would you use to load the help file for the rnorm function? Solution ?rnorm Is using AI permitted on this module? Absolutely not, how dare you!Yes, in fact it's encouraged! 4.3 Meet your pesonal R tutor ChatGPT (or alternitive) Well this is as good a time as any to introduce you to my teaching assistant for this module, ChatGPT (or an equivalent alternative) Writing code has become vastly easier in the last year with the public release of various Large Language Models (LLMs) AIs. I won't go into depth with how LLMs work (mainly because I don't actually know) but in very basic terms a LLM is an artificial intelligence that has been \"trained\" on an unfathomablly large amount of language data from across the internet. As I've previously mentioned, many academic disciplines and businesses use R for data analyses and as such there are many guides and resources online explaining how to write code in R. Talking to an LLM is like talking to someone that has read, memorised, and understands all of these guides and is able to explain pretty much most of it in a very simple to understand way. Personally, I use a LLM called ChatGPT from OpenAI, you can set up a free account with just an email address. There is a paid version, but you shouldn't need that for what we'll be using it for this semester. Lately, I've been working with the AI two write apps for teaching undergraduate statistics (like this) and I have to say it makes learning new aspects of coding far quicker and more enjoyable than hacking my way through Google or YouTube looking for a suitable explanations. As it's a chatbot I thought I'd be nice to let ChatGPT introduce themselves, click this link to see the transcript of our conversation and a demonstration of what working with an AI can do for your R learning. Click here for the full conversation Seeing as we've only just entered this brave new world of Ai, for now, I would ask you to only use LLMs as an aid for your R coding rather than your written work (no doubt some of you have heard about it's hugely disruptive ability to write essays). And at this stage please only use it for my module, your other lecturers may have different preferences which I would like you to respect. If in doubt, ask. 4.4 Back to the coding If you're only using R as a basic calculate you're basically using a sledgehammer to crack a walnut. Obviously coding with R can do so much more. One really important aspect of R is assigning data to a object. 4.4.1 Assigning numbers to objects Run the following code line by line. Each time you run a line take a look in the environment tab in the top right window of RStudio. a &lt;- 5 b &lt;- 10 c &lt;- a+b a+b+c The first two lines use the &lt;- symbols to assign a number to a letter. The third line adds the value of a to the value of b and creates a new object of c containing the value of the sum of a+b. The fourth line add each of the three created objects together, if you look in the console you'll see the output of the sum. ## [1] 30 Here's another example, this time based on this classic question popularised in Daniel Kahneman's work of system 1 and system 2. A question where your initial gut reaction is reliably likely to give you the wrong answer, but we can use code to help us work it out. Question: A bat a ball cost £1.10, The bat costs £1.00 more than the ball. How much does the ball cost? You're first instinct is likely to say that the ball costs £0.10 but the answer is actually £0.05. And we can check this with what we've just learnt about assigning values to objects. See if you can adapt the code appropriately to test test this. Reassigning a value to a object overrides the previous value, or you can click the little broom icon in the environment window to remove all previous objects. # change out the question mark until you get the correct answer of 1.1 Ball &lt;- ? Bat &lt;- Ball + 1.00 Bat + Ball Click if you're intrested in the algebre Don't worry this question still hurts my brain, even after teaching it for years! Bat + Ball = 1.10 Bat = 1.00 + Ball 1.00 + 2*Ball = 1.10 Ball = (1.10 - 1.00)/2 Ball = 0.1 / 2 Ball = 0.05 4.4.2 Assigning multiple data to an object An object can hold more than just a single value. In the following code a range of numerical data is being created, and is assigned to the object age. The c() is a function that concatenates (fancy word for links) values together and again the &lt;- stores this to a single object, in this case age. After assigning this data to age if your run age (either in the console or from script) then you the list will appear as output in your console. age &lt;- c(23, 57, 42, 12, 8, 92, 35, 86, 26, 65) Sometimes the data we want is just a list of consecutive numbers. The following lines of code are equivalent however one is substantially quicker than the other, especially at scale. ID_number &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) ID_number &lt;- 1:10 We can also assign words/letters (known as string data) to an object. names &lt;- c(&quot;Kayleigh&quot;, &quot;Lisa&quot;, &quot;Beatrice&quot;, &quot;Jessie&quot;, &quot;Hugo&quot;, &quot;Justin&quot;, &quot;Mohammed&quot;, &quot;Shawn&quot;, &quot;Hasan&quot;, &quot;Kelly&quot;) gender &lt;- c(&quot;Female&quot;, &quot;Female&quot;, &quot;Female&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Non-binary&quot;) Some of you might see where we're going with this, and yes we can combine these objects into a data set and assign it to yet another object. From this you can see that we've created a new type of object in our environment window, a Data object. It tells us how many observations there are (in this case, rows of data) and how many variables there are (in this case, columns of data). We can now view this data by clicking on it or by using the view() command. data &lt;- data.frame(ID_number, age, names, gender) view(data) 4.5 Extra exercises Create a dataframe that contains the data from the following table: Solution This is not the only way to do this, if you've achieved the same results a different way. Great, well done! Age &lt;- c(18, 18, 19, 22, 24, 24, 25, 29, 35, 42, 52, 68) ID &lt;- 1:12 Gender &lt;- c(&quot;Female&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;,&quot;Female&quot;,&quot;Non-binary&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;,&quot;Non-binary&quot;) Score &lt;- c(100, 89, 92, 62, 100, 75, 78, 89, 100, 86, 68, 85) testscore &lt;- data.frame(ID, Age, Gender, Score) Next use the rnorm function to generate data for each participant. Feel free to chose your own mean and standard deviation. Hint R is case sensitive so double check that you've the same capatalisation as your objects throughout. Don't forget you can use the ?rnorm command to open the help file for the rnorm function. This will show you how to use it. Solution Again, this is not the only way to do this, if you've achieved the same results a different way. Great, well done! Random &lt;- rnorm(12, 2, 1) testscore &lt;- data.frame(ID, Age, Gender, Score, Random) Also technically this isn't random data its data that adhears to a normal distrabution. Loving learning R and want more? Rather than raceing ahead in this book I'd suggest taking a look at some of the other guides that are out there. PsyTeachR is particularly good (its how I learnt), and R for data science is a classic. I also love the TidyTuesday community but I suggest learning more of the basics before diving in to those datasets. "],["week-2---basic-visualisation.html", "Chapter 5 Week 2 - Basic visualisation 5.1 Introduction 5.2 Getting an overview of your data 5.3 Visualising global life expectancy 5.4 Correlation between variables 5.5 Exercise 3 - Applying what you have learnt", " Chapter 5 Week 2 - Basic visualisation 5.1 Introduction In this chapter, I want to introduce you to the data visualisation package ggplot2 (which is contained within the tidyverse). ggplot is an incredibly versatile way of creating graphs and has become the standard throughout academic publishing and data journalism. The proliferation of ggplot Here is a link to a post from the BBC talking about how they recently moved to using ggplot for all their data visualisations Soon you'll be spotting figures everywhere and start saying to yourself \"I bet I could recreate that with ggplot\", and then get sad when you find out they didn't share the data :-( For the following examples and exercises, we'll be using a 2015 country-level summary of World Health Organisation data related to life expectancy (source). In the next chapter, I will show you how to upload your own data files but for now I've given you the code that imports the dataset directly from my GitHub (the web hosting system that I use for this book). # Run this code to get the data for this chapter library(tidyverse) who_rawdata &lt;- read_csv(&quot;https://raw.githubusercontent.com/RichClarkePsy/Datasets/main/Life%20expectancy%20dataset.csv&quot;) For this chapter you will need to following packages: library(tidyverse) # contains the ggplot2 package library(ggrepel) # used for add text labels to data points Reminder about packages Remember if you are using any of these packages for the first time you will need to run install.packages(\"packagename\"). It is often best to run this in the console just so you're not re-installing the package each time you run your code. Note the quotation marks around the package name. R is quite sensitive to this sort of precision and, as such, attention to detail ends up solving most of the errors you get. Either that or just ask ChatGPT to do it for you. Both completely legitimate ways to code! If you've worked your way through the previous chapters, then you'll already have tidyverse installed but you'll likely need to install ggrepel. 5.1.1 Getting stuck and overwhelmed? Throughout this week there is going to be chucks of code where you have little to no clue what is going on. That's ok! One of the best ways to learn R is to just play around with pre-existing, change parts and see what happens. If you run into errors that you don't understand, or code you want explained, just copy and past it into a ChatGPT conversation and it will explain it to you (I've included an example of this later). You can even ask follow up questions or ask it to adapt the code to your specifications. Though it does help to know at least a little about what your code is doing, especially later on in the course when we move on to analysis. 5.2 Getting an overview of your data By this point you should have your packages loaded and have a data file in the top right Environment window named who_rawdata. Just by looking at the data in this window we can see two aspects of the dataset; the number of observations and the number of variables. Observations in this case are the individual countries and variables are going to be the various health and social data. Click on the dataset or run view(who_rawdata) to take a look at the data. When you do a new tab will appear with a view similar to this: Viewing your data like this is good for a quick look at the data, however, in health we are often using datasets with many hundreds of variables and thousands of observations. So we won't be looing at the data directly as much as we might when using SPSS. Instead we want to get into the habit of exploring the dataset through code. The following gives you some basics information about the dataset: dim(who_rawdata) str(who_rawdata) summary(who_rawdata) From viewing the output of the above code... What is the variable name for life expectancy? Name a variable that has string/character data What is the average number of years of schooling across all countries? 5.3 Visualising global life expectancy Statistics are great (and if you've done the undergraduate here you know I love them!), but often, when we want to get a quick and easy understanding of a dataset, we can get everything we want from simple data visualisation. 5.3.1 Histograms Histograms are a good first step towards understanding a continuous variable like life expectancy. To create a histogram we're going to take our dataset then we're going to pipe %&gt;% it in to the ggplot function. Extra details on pipes %&gt;% A pipe is basically a way of saying \"and then\" in code it helps tidy things up so that we're not creating object after object. So in this case we're saying: take the data and then use that data with the following ggplot expression. This can all be done on one line but its a lot neater to hit enter after each pipe and start the next expression on the next line. It also indents for ease of navigation. This is part of the grammar of coding that your'll get use to in time. PsyTeachR has a great chapter on pipes that explains the concept in depth. For now you can just adapt the code I have given you. You'll see the code for pipes like this %&gt;% through this module but this |&gt; also does the same job. The difference is far too nerdy for any of us to care about, but just know that they both do basically the same thing. Each ggplot visulisation is made up of layers. You start by mapping an aesthetic (aes), which involves the organisation of what data goes on what axis and how data is segmented within the visualisation. Then you layer on (using a + sign) a geometry to combine the data with a desired visual format. The following example places life expectancy on the x-axis and uses the histogram geometry. who_rawdata %&gt;% ggplot(aes(x=Life_exp)) + geom_histogram() This is fine for our quick exploration of the data but we could also tidy this up to the point at which it would be perfectly fine to include it in a paper. who_rawdata %&gt;% ggplot(aes(x=Life_exp)) + geom_histogram(binwidth = 1, colour = &quot;black&quot;, fill = &quot;#58A139&quot;) + labs(title = &quot;Figure 1. Histogram of Global Life Expectancy&quot;, subtitle = &quot;N = 183 countries&quot;, x = &quot;Life expectancy from birth&quot;, y = &quot;Number of countries&quot;, caption = &quot;Year: 2015 | Data source: WHO&quot;) + theme_light() + theme(plot.caption = element_text(hjust = 0.5)) 5.3.2 Exercise 1 Take the above code and adapt it to work out what each of the arguments (e.g. \"binwidth\" or \"subtitle\") control. Colours can be in words or in hex codes. Here's a useful website where you can get hex codes www.htmlcolorcodes.com. Note: None of this is magic btw At some point or other I've Googled how to do pretty much every element here. Try searching for the following and see if you can find similar looking code: \"Change the colour of histogram bars in ggplot\" \"Add a caption to a ggplot figure\" \"Align caption to center in ggplot\" Also here's a conversation with ChatGPT where it makes some changes to this final version and then suggests some genuinely helpful additions (dotted gridlines are a nice touch). 5.3.3 Facet wrap This is a good starting visualisation, but say we want to understand the distribution for each region. To do this all we need to do is add the last line of the code below a create a nicely formatted version of the six histograms together. who_rawdata %&gt;% ggplot(aes(x=Life_exp)) + geom_histogram(binwidth = 1, colour = &quot;black&quot;, fill = &quot;#58A139&quot;) + labs(title = &quot;Figure 1. Histogram of Global Life Expectancy&quot;, subtitle = &quot;N = 183 countries&quot;, x = &quot;Life expectancy from birth&quot;, y = &quot;Number of countries&quot;, caption = &quot;Year: 2015 | Data source: WHO&quot;) + theme_light() + theme(plot.caption = element_text(hjust = 0.5)) + facet_wrap(~ Continent) Note about ~ The ~ is often used in R to denote a relationship. You'll often see it in regression analysis but in this case it's telling ggplot to facet (i.e. seperate) the graph by Continent 5.3.4 Boxplots The histograms definitely has value (for instance we can now see the difference in life expectancy between Europe and Africa very clearly), but a better way to visualise the same data might be to change from a histogram to a boxplot. who_rawdata %&gt;% ggplot(aes(x=Life_exp, y=Continent)) + geom_boxplot() + theme_light() Much better, instantly we can see how the distribution of life expectancy differs across continents. A few things spring to mind to make this figure more informative. Label the outliers (it'd be nice to know what countries they are) Add some colour Add title etc The first point is genuinely quite hard to solve and involves the two lines of code below. The first line creates a new function that can be used to identify outliers in a variable. Then, in the next line, I uses the function to make a new variables where ever time the function finds an outlier in Life_exp it assigns the text from the Country variable. findoutlier &lt;- function(x) { return(x &lt; quantile(x, .25) - 1.5*IQR(x) | x &gt; quantile(x, .75) + 1.5*IQR(x)) } who_with_outliers &lt;- who_rawdata %&gt;% group_by(Continent) %&gt;% mutate(outlier_LE = ifelse(findoutlier(Life_exp), Country, NA)) Also, because I've made a change to the data (in this case added a new variable) I've assigned it (with this &lt;-) to a new object name as I always try to keep the raw data in the same form as it was read in. Just in case I need to use it again later. Notice that you should have a new dataframe object in the environment window after running this. To add these outlines to the figure I've added a layer of text above the box plot layer. For the other two points I've selected a pre-existing colour pallet and mapped it to our Continent variable and I've added labels with the labs function. who_with_outliers %&gt;% ggplot(aes(x=Life_exp, y=Continent, fill = Continent)) + geom_boxplot(width = 0.5, alpha = 0.75, show.legend = FALSE) + geom_text_repel(aes(label=outlier_LE), position = &quot;identity&quot;, size = 3, na.rm=TRUE) + scale_fill_brewer(palette = &quot;Dark2&quot;) + labs(title = &quot;Figure 2. Boxplot of Global Life Expectancy&quot;, subtitle = &quot;N = 183 countries&quot;, x = &quot;Life expectancy from birth&quot;, y = &quot;&quot;, caption = &quot;Year: 2015 | Data source: WHO&quot;) + theme_light() + theme(plot.caption = element_text(hjust = 0)) Now that is a good looking figure! There's a lot going on to make these figures but luckily you don't need to keep it all in your head at one time. I often go back to old code or code from webbooks like this or PsyTeachR and adapt and change it for my needs. In fact lets adapt this code for BMI insterad of life expectancy 5.3.5 Exercise 2 Adapt the code above to make a histogram and boxplot for the BMI variable instead of life expectancy. Note: Here is the code for calculating the outliers for BMI, as this requires adding in the extra line drop_na(BMI). This tells R to remove any missing data in the variable BMI. Note the change in dataset name as well. hide(hint) After running the code above you'll need to start with the data_BMI file rather than the rawdata. Look to see all the parts of the code that say Life_exp and change these out for BMI Make sure you remember to change the title and axis lables. unhide() hide(Solution) This is one way the histogram coul look: who_BMI %&gt;% ggplot(aes(x=BMI)) + geom_histogram(binwidth = 1, colour = &quot;black&quot;, fill = &quot;#58A139&quot;) + labs(title = &quot;Figure 1. Histogram of Body Mass Index&quot;, subtitle = &quot;N = 183 countries&quot;, x = &quot;BMI&quot;, y = &quot;Number of countries&quot;, caption = &quot;Year: 2015 | Data source: WHO&quot;) + theme_light() + theme(plot.caption = element_text(hjust = 0.5)) And this is one way the box plot could look: who_BMI %&gt;% ggplot(aes(x=BMI, y=Continent, fill = Continent)) + geom_boxplot(width = 0.5, alpha = 0.75, show.legend = FALSE) + geom_text_repel(aes(label=outlier_BMI), position = &quot;identity&quot;, size = 3, na.rm=TRUE) + scale_fill_brewer(palette = &quot;Dark2&quot;) + labs(title = &quot;Figure 3. Boxplot of global BMI&quot;, subtitle = &quot;N = 181 countries&quot;, x = &quot;BMI&quot;, y = &quot;&quot;, caption = &quot;Year: 2015 | Data source: WHO&quot;) + theme_light() + theme(plot.caption = element_text(hjust = 0)) ## Warning: ggrepel: 3 unlabeled data points (too many overlaps). Consider ## increasing max.overlaps unhide() What do you notice about the data from this visual check? Personally, I'm concerned about those low BMI data points, BMI should never really be that low. Perhaps this is a data recording issue. No way to know without the raw data to go into. For further analysis we may want to filter out these data points, or at least check them against other data sources. 5.4 Correlation between variables Next lets take a look at how good ggplot is for making scatter plots. The following code plots number of years of schooling (on the x-axis) against life expectancy (on the y=axis) for each of our 183 countries. Again, this takes the dataset pipes it into ggplot. The aestectic is years of schooling on the x axis and life expectancy on the y axis. The geometry layer is using geom_point (rather geom_boxplot or geom_histogram) which creates a scatter plot. who_rawdata %&gt;% ggplot(aes(x = Schooling, y = Life_exp)) + geom_point() A very clear correlation. In the comming chapters we'll look at how strong this correlation is, but for now, to tidy this up, we can add the regression line (by adding an extra geometry layer of geom_smooth) and titles. who_rawdata %&gt;% ggplot(aes(x = Schooling, y = Life_exp)) + geom_point() + geom_smooth(method = &quot;lm&quot;, formula = y ~ x) + labs(title = &quot;Figure 2. A scatter plot of life expectancy by number of years of schooling&quot;,) + xlab(label = &quot;Average number of years of schooling&quot;)+ ylab(label = &quot;Average life expectancy (in years)&quot;) What happens when you change the order and put the geom_smooth before the geom_point function? Only the dots are visableOnly the line is visableThe dots now appear ontop of the lineEverything brakes! There are usually multiple different ways to achieve what you with using ggplot. Can you delete the bottom two lines of code and find a way to label the x and y axis within the labs function? Hint Check the code from earlier unhide() Solution who_rawdata %&gt;% ggplot(aes(x = Schooling, y = Life_exp)) + geom_point() + geom_smooth(method = &quot;lm&quot;, formula = y ~ x) + labs(title = &quot;Figure 2. A scatter plot of life expectancy by number of years of schooling&quot;, x = &quot;Average number of years of schooling&quot;, y = &quot;Average life expectancy (in years)&quot;) ## Warning: Removed 10 rows containing non-finite values (stat_smooth). ## Warning: Removed 10 rows containing missing values (geom_point). 5.4.1 Adding to the aestetic We have a bit more freedom in what we can do with the aestetic for our scatter plot. We can map colour to our data points using the Continent variable in our dataset. who_rawdata %&gt;% ggplot(aes(x = Schooling, y = Life_exp, colour = Continent)) + geom_point() + geom_smooth(aes(group = 1), method = &quot;lm&quot;, formula = y ~ x, colour = &quot;black&quot;) + labs(title = &quot;Figure 3. A scatter plot of life expectancy by number of years of schooling&quot;, x = &quot;Average number of years of schooling&quot;, y = &quot;Average life expectancy (in years)&quot;) # delete aes(group = 1) &amp; ,colour = &quot;black&quot; to see why I included them We can even map the size of the points to the Population variable so that the larger the population the larger the dot. who_rawdata %&gt;% ggplot(aes(x = Schooling, y = Life_exp, colour = Continent, size = Population)) + geom_point() + geom_smooth(aes(group = 1), method = &quot;lm&quot;, formula = y ~ x, colour = &quot;black&quot;) + labs(title = &quot;Figure 3. A scatter plot of life expectancy by number of years of schooling&quot;, x = &quot;Average number of years of schooling&quot;, y = &quot;Average life expectancy (in years)&quot;) + guides(size = FALSE) # delete this line to see why I included it The comments in the code also indicate parts where I had AI assistants. I couldn't remember how to make these changes off the top of my head. Googleing would have taken about 15 mins to find the right guide with the right code but my requests to ChatGPT took less than a minute and also gave an explanation of how the extra code works. 5.5 Exercise 3 - Applying what you have learnt The Gapminder organisation is one of my non-profits. Their mission is to promote a fact-based worldview that everyone can understand. Never have I seen data about demography and global helath issues communicated in such an engaging way. For instance,here is the best 5 minutes of data communication I've ever seen. Sadly we lost Hans Rosling in 2017 but his son and daughter-in-law continue to do amazing work and are worth following. Gapminder also has a R package that contains data similar to the data we've just been using. Install the package, load the package, and import the data using the code below. install.packages(&quot;gapminder&quot;) library(gapminder) gapminder_data &lt;- gapminder::gapminder By looking at the data you can likely see that there's a lot more of it this time. That's due to there also being a year variable so that we can see changes over time. The code below just extracts the data for the most recent year in the data set, 2007. gapminder_2007 &lt;- gapminder_data %&gt;% filter(year == 2007) Created histograms for life expectancy and GDP Created boxplots for life expectancy and GDP Create a simple scatter plot of life expectancy and GDP Add the continent and population size data to your scatter plot from 3 Make sure each has an appropriate title and axis. "],["week-3---working-with-data-files.html", "Chapter 6 Week 3 - Working with data files 6.1 Introduction 6.2 Reading data into R from a data file 6.3 Step 2: Data wrangling 6.4 Step 3: Discriptive statistics and basic visulisation 6.5 Step 4: Statistical test 6.6 Test yourself exercise", " Chapter 6 Week 3 - Working with data files 6.1 Introduction The aim of this chapter is to reproduce the following figure from Bravo-Gutierrez et al (2021). The figure shows the percentage of methylation for two genes, AHRR (fig. 2a) and PRSS23 (fig. 2b), as compared across smokers and non-smokers. The genetics aspect might be confusing (at least to us psychologists) but the statistics are very basics (a Mann-Whitney U test). The authors found a significant difference across smokers AHRR gene (p=0.003) but not across the PRSS23 gene (p=0.276) The authors of the paper have made the data from the study open access (as all good scientists should!), but not their code. Let's replicate the analysis and see if we can find the same results and can create the same image. Download the data from the papers supplemental materials at the bottom of the paper or if you have access to moodle I have uploaded the file to this weeks section. For this chapter your will need the following packages. If needed, check previous chapters for how to install and load packages. library(tidyverse) # tidy grammer and ggplot for the graphs library(broom) # tidys up and statistical findings library(ggpubr) # to add p values to graph 6.2 Reading data into R from a data file Data is often messy, this is especially true of data you don't collect yourself, and it's especially especially true for data that other academics share online. Data transparency is often an afterthought for a publication, with little care and attention given to if the data is usable, and mostly just shared in order to tick the box to say that its available. Thankfully, the data shared for this paper is nice and neat and tidy, we only need to take a few steps to get it into R. 6.2.1 Setting your working directory Each time you start an analysis in R I recommend that you create a new folder. Put all the data you want to analyses in that folder. Open a script in R and save that script in your newly created folder along with your data. Once everything is in the same place, back in RStudio, set your working directory by clicking Session -&gt; Set Working Directory -&gt; Choose Directory and then select your chosen folder. This allows R to know where to look when you want to import data, and also where to save any outputs. It seems like a silly step when we're just making a couple of plots, but as your projects become more complicated this kind of workflow becomes invaluable. 6.2.2 File formats and reading in the data Open the Excel file downloaded from the supplemental materials of Bravo-Gutierrez et al 2021. You should see four tabs at the bottom of the file, this means we're going to have to split this file up into individual pages to get it into RStudio. Excel files also comes with a whole load of hidden junk that that we don't want so instead we would like to save this tab out as a Comma-Separated Values (CSV) file, which is just a text file with a comma separating of the values in our data set. Our data is on tab S4 and luckily it's in a lovely state and just requires us to navigate to the S4 tab, click save as and then select CSV from the drop down \"save as type\" menu. Save this to the folder you created previously. The nightmare excel file Before continuing, take a quick look at the other tabs in the file. Tab one looks intimidating but this is just two screen shots from an online gene database. It's tabs S2 and S3 that scare me (or at least it would take me a while to get them into a usable form). If you scroll down on either of these tabs you'll see that the headers repeat themselves and the data is not all neatly in a line as you would find in an SPSS file. Carry on further with R and you'll learn how to work with this, and other even messier, kind of data, and turn it into whats known as tidy data. 6.2.3 Reading data in to R So long as you have set your working directory and your have loaded the tidyverse package the following code, adapted for your file name, will read the data in and assign it to an object. raw_data &lt;- read_csv(&quot;Bravo-Gutierrez figure 2 data.csv&quot;) Why use read_csv rather than read.csv While the read.csv is from base R, the read_csv function is found in the readr package from the tidyverse so there's and extra step to get the function but its worth it for three reasons: read_csv does not convert character strings into factors by default, unlike read.csv. read_csv returns tibbles rather than data frames. Basically, the same but tibbles work better with the other tidyverse packages read_csv something to do with NAs. Is this the dullest note topic in the whole book? Maybe, its a good contender at least. 6.2.4 Self test What does the working directory do? It is the location on your computer where RStudio runs and accesses your filesIt give you extra RAM to your analysis quickerIt changes the colour theme of RStudio What is a CSV file? A file specially made for use in RA general use text file storing tabular data, separated by commasA file for storing supplementary figure for a paper What would you type to read the following data and assign it to a object data? Can you read an SPSS file into R? That program is dead to us now. Never speak those letter again!Yes, check out the Haven package for more on this topic 6.3 Step 2: Data wrangling We are yet to wrangle. Well, I wrangled a little in the last chapter but didn't really explain We only actually need three variables from this dataset so the first thing we are going to do to tidy this data set up is to pull out those variables and put them in a new object called fig2_data. Use the select function (as mentioned in week 1) to take the variables Sample_ID, %5mc-AHRR &amp; %5mc-PRSS23 and create a new object called fig2_data fig2_data &lt;- raw_data %&gt;% select(Sample_ID, `%5mc-AHRR`,`%5mc-PRSS23`) If you look at the Sample_ID variable, you'll see that the variable indicates if the participant is a non-smoker (NS) or smoker (S) and it includes their ID number. In order to recreate the analysis we need to create a new variable that just contains the smoker or non-smoker data. There are a number of ways to do this, but here is what I did: fig2_data &lt;- fig2_data %&gt;% mutate(smoker = case_when(str_starts(Sample_ID, &quot;NS&quot;) ~ &quot;Non-Smoker&quot;, str_starts(Sample_ID, &quot;S&quot;) ~ &quot;Smoker&quot;)) The first line tells R to just overwrite the same data object with whatever we do next. I then used the mutate function to create a new variable. This variable will be called smoker and I've told R to look at the start of each string of data in the variable Sample_ID and if the letters \"NS\" are first then put \"Non-Smoker\" in the new variable, and if the letter \"S\" if first then put \"Smoker\" in the new variable. If you were to View(fig2_data) now you will see a new variables has been created with our smoker/non-smoker information. Lets also change the names on our gene variables while we're at it: fig2_data &lt;- fig2_data %&gt;% rename(AHRR = `%5mc-AHRR`, PRSS23 = `%5mc-PRSS23`) Note about variable names Variable names need to be in a specific format for R to recognise them as such. Our original data starts with a % sign which confuses R. To get around this issue it encloses the name in `` punctuation, as a way to indicate that this is a string. More commonly you'll see this when your variable name have a SPACE between words. It's worth recording these when you see them as they can be a bit of a pain when it comes to using auto-complete in your analysis later on. 6.4 Step 3: Discriptive statistics and basic visulisation Now we'll run some basic summary statistics to get a feel of the data. Create a new dataframe called fig2_discriptives out of the fig2_data object. This dataframe needs to contain the number of partcipants and the mean, median, and standard deviation of AHRR methylation split by smokers and non-smokers. For this you will need to use the group_by and summarise functions as mentioned in week 2. There is also some missing data so you will also need to include the following code at various points na.rm = TRUE Click for solution fig2_discriptives &lt;- fig2_data %&gt;% group_by(smoker) %&gt;% summarise(N = n(), Mean = mean(AHRR, na.rm = TRUE), Median = median(AHRR, na.rm = TRUE), SD = sd(AHRR, na.rm = TRUE)) Next use ggplot to create a basic box plot of the AHRR methylation variable as separated by our smoker independent variable. Click for solution fig2_data %&gt;% ggplot(aes(x=smoker, y=AHRR)) + geom_boxplot() 6.5 Step 4: Statistical test Now for the statistical test test_result &lt;- wilcox.test(AHRR ~ smoker, data=fig2_data) %&gt;% tidy() %&gt;% mutate(p.value = round(p.value, digits = 3)) cg05575921 my_comparisons &lt;- list(c(&quot;Smoker&quot;, &quot;Non-Smoker&quot;)) fig2_data %&gt;% ggplot(aes(x=smoker, y=AHRR, fill=smoker)) + geom_boxplot() + scale_fill_brewer(palette=&quot;Dark2&quot;) + stat_compare_means(comparisons = my_comparisons) + geom_jitter(width = .25) + scale_y_continuous(name = &quot;%5mc-cg05575921&quot;) + theme(legend.position = &quot;none&quot;) 6.6 Test yourself exercise Create a new script and create the following for the PRSS23 gene A dataframe containing the summary statistics A dataframe containing the comparison analysis Figure 2b from the original paper. Note to create Figure 2b you will need this additional line of code that will re-scale the y-axis: scale_y_continuous(limits=c(0, 10), name = \"PRSS23\") # reveal for answer fig2_discriptives &lt;- fig2_data %&gt;% group_by(smoker) %&gt;% summarise(N = n(), Mean = mean(PRSS23, na.rm = TRUE), Median = median(PRSS23, na.rm = TRUE), SD = sd(PRSS23, na.rm = TRUE)) fig2_data %&gt;% ggplot(aes(x=smoker, y=PRSS23, fill=smoker)) + geom_boxplot() + scale_fill_brewer(palette=&quot;Dark2&quot;) + stat_compare_means(comparisons = my_comparisons, label.y = 10) + geom_jitter(width = .25) + scale_y_continuous(limits=c(0, 10), name = &quot;PRSS23&quot;) + # limits added to make it look like the paper theme(legend.position = &quot;none&quot;) # more work needed to add the p values "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
